# Dialog script for pbrt_medium_rgbgrid automatically generated

{
    name	pbrt_medium_rgbgrid
    script	pbrt_medium_rgbgrid
    label	"PBRT RGBGrid Medium"

    rendermask	PBRT
    externalshader 1
    shadertype	generic
    signature	"Default Inputs"	default	{ }

    outputoverrides	default
    {
    }

    help {
	""
    }

    parm {
        name    "LeScale"
        label   "LeScale"
        type    float
        default { "0" }
        help    "Scale the emissive light"
        range   { 0 10 }
    }
    parm {
        name    "scale"
        label   "Scale"
        type    float
        default { "1" }
        help    "Scale factor applied to the absorption and scattering cross sections."
        range   { 0 10 }
    }
    parm {
        name    "g"
        label   "g"
        type    float
        default { "0" }
        help    "The phase function asymmetry parameter."
        range   { -1 1 }
    }
    groupsimple {
        name    "derived"
        label   "Parameters Derived From Volume Prims"

        parm {
            name    "volume_sop"
            label   "Volume SOP"
            type    oppath
            default { "" }
            parmtag { "opfilter" "!!SOP!!" }
            parmtag { "oprelative" "." }
            parmtag { "pbrt.meta" "1" }
        }
        parm {
            name    "sigma_a"
            label   "Sigma a"
            type    string
            size    3
            default { "" "" "" }
            disablewhen "{ volume_sop == \"\" }"
            parmtag { "pbrt.callback" "volume_geometry" }
            parmtag { "pbrt.type" "rgb" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "sigma_s"
            label   "Sigma s"
            type    string
            size    3
            default { "" "" "" }
            disablewhen "{ volume_sop == \"\" }"
            parmtag { "pbrt.callback" "volume_geometry" }
            parmtag { "pbrt.type" "rgb" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "Le"
            label   "Le"
            type    string
            size    3
            default { "" "" "" }
            disablewhen "{ volume_sop == \"\" } { sigma_a == \"\" }"
            parmtag { "pbrt.callback" "volume_geometry" }
            parmtag { "pbrt.type" "rgb" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "p0"
            label   "P0"
            type    vector
            size    3
            default { "-1" "-1" "-1" }
            disablewhen "{ volume_sop == \"\" } { sigma_a == \"\" sigma_s == \"\" }"
            range   { -1 1 }
            parmtag { "pbrt.force" "1" }
            parmtag { "pbrt.type" "point3" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "p1"
            label   "P1"
            type    vector
            size    3
            default { "1" "1" "1" }
            disablewhen "{ volume_sop == \"\" } { sigma_a == \"\" sigma_s == \"\" }"
            range   { -1 1 }
            parmtag { "pbrt.force" "1" }
            parmtag { "pbrt.type" "point3" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "nx"
            label   "Nx"
            type    integer
            default { [ "hou.evaluatingParm().node().hm().get_volume_res(hou.evaluatingParm())" python ] }
            disablewhen "{ volume_sop == \"\" } { sigma_a == \"\" sigma_s == \"\" }"
            range   { 0 10 }
            parmtag { "pbrt.force" "1" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "ny"
            label   "Ny"
            type    integer
            default { [ "hou.evaluatingParm().node().hm().get_volume_res(hou.evaluatingParm())" python ] }
            disablewhen "{ volume_sop == \"\" } { sigma_a == \"\" sigma_s == \"\" }"
            range   { 0 10 }
            parmtag { "pbrt.force" "1" }
            parmtag { "script_callback_language" "python" }
        }
        parm {
            name    "nz"
            label   "Nz"
            type    integer
            default { [ "hou.evaluatingParm().node().hm().get_volume_res(hou.evaluatingParm())" python ] }
            disablewhen "{ volume_sop == \"\" } { sigma_a == \"\" sigma_s == \"\" }"
            range   { 0 10 }
            parmtag { "pbrt.force" "1" }
            parmtag { "script_callback_language" "python" }
        }
    }

}
